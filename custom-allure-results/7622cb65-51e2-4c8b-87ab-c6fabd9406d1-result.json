{"name": "test_paymentsflow", "status": "broken", "statusDetails": {"message": "seleniumbase.common.exceptions.NoSuchElementException: Message: \n Element {button:contains(\"Yes\")} was not present after 7 seconds!", "trace": "self = <test_bot_end_to_end.BotFlow testMethod=test_paymentsflow>, selector = \"//button[contains(., 'Yes')]\", by = 'xpath', timeout = 7, delay = 0\nscroll = True\n\n    def click(\n        self, selector, by=\"css selector\", timeout=None, delay=0, scroll=True\n    ):\n        self.__check_scope()\n        if not timeout:\n            timeout = settings.SMALL_TIMEOUT\n        if self.timeout_multiplier and timeout == settings.SMALL_TIMEOUT:\n            timeout = self.__get_new_timeout(timeout)\n        original_selector = selector\n        original_by = by\n        selector, by = self.__recalculate_selector(selector, by)\n        if delay and (type(delay) in [int, float]) and delay > 0:\n            time.sleep(delay)\n        if page_utils.is_link_text_selector(selector) or by == By.LINK_TEXT:\n            if not self.is_link_text_visible(selector):\n                # Handle a special case of links hidden in dropdowns\n                self.click_link_text(selector, timeout=timeout)\n                return\n        if (\n            page_utils.is_partial_link_text_selector(selector)\n            or by == By.PARTIAL_LINK_TEXT\n        ):\n            if not self.is_partial_link_text_visible(selector):\n                # Handle a special case of partial links hidden in dropdowns\n                self.click_partial_link_text(selector, timeout=timeout)\n                return\n        if self.__is_shadow_selector(selector):\n            self.__shadow_click(selector, timeout)\n            return\n        if self.__needs_minimum_wait() or self.browser == \"safari\":\n            time.sleep(0.05)\n        element = page_actions.wait_for_element_visible(\n            self.driver,\n            selector,\n            by,\n            timeout=timeout,\n            original_selector=original_selector,\n        )\n        self.__demo_mode_highlight_if_active(original_selector, original_by)\n        if scroll and not self.demo_mode and not self.slow_mode:\n            self.__scroll_to_element(element, selector, by)\n        pre_action_url = None\n        try:\n            pre_action_url = self.driver.current_url\n        except Exception:\n            pass\n        pre_window_count = len(self.driver.window_handles)\n        try:\n            if (\n                by == By.LINK_TEXT\n                and (self.browser == \"ie\" or self.browser == \"safari\")\n            ):\n                self.__jquery_click(selector, by=by)\n            elif self.browser == \"safari\":\n                self.execute_script(\"arguments[0].click();\", element)\n            else:\n                href = None\n                new_tab = False\n                onclick = None\n                try:\n                    if self.headless and element.tag_name.lower() == \"a\":\n                        # Handle a special case of opening a new tab (headless)\n                        href = element.get_attribute(\"href\").strip()\n                        onclick = element.get_attribute(\"onclick\")\n                        target = element.get_attribute(\"target\")\n                        if target == \"_blank\":\n                            new_tab = True\n                        if new_tab and self.__looks_like_a_page_url(href):\n                            if onclick:\n                                try:\n                                    self.execute_script(onclick)\n                                except Exception:\n                                    pass\n                            current_window = self.driver.current_window_handle\n                            self.open_new_window()\n                            try:\n                                self.open(href)\n                            except Exception:\n                                pass\n                            self.switch_to_window(current_window)\n                            return\n                except Exception:\n                    pass\n                # Normal click\n>               self.__element_click(element)\n\nvenv\\lib\\site-packages\\seleniumbase\\fixtures\\base_case.py:462: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\lib\\site-packages\\seleniumbase\\fixtures\\base_case.py:2936: in __element_click\n    element.click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022142A06760>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF78CAA88C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA543C7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA559426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=120.0.6099.199)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF78CE92142+3514994]\nE       \t(No symbol) [0x00007FF78CAB0CE2]\nE       \t(No symbol) [0x00007FF78C9574C3]\nE       \t(No symbol) [0x00007FF78C9A2D29]\nE       \t(No symbol) [0x00007FF78C996A0F]\nE       \t(No symbol) [0x00007FF78C9C5FEA]\nE       \t(No symbol) [0x00007FF78C9963B6]\nE       \t(No symbol) [0x00007FF78C9C6490]\nE       \t(No symbol) [0x00007FF78C9E28F6]\nE       \t(No symbol) [0x00007FF78C9C5D93]\nE       \t(No symbol) [0x00007FF78C994BDC]\nE       \t(No symbol) [0x00007FF78C995C64]\nE       \tGetHandleVerifier [0x00007FF78CEBE16B+3695259]\nE       \tGetHandleVerifier [0x00007FF78CF16737+4057191]\nE       \tGetHandleVerifier [0x00007FF78CF0E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF78CBE04F9+689705]\nE       \t(No symbol) [0x00007FF78CABC048]\nE       \t(No symbol) [0x00007FF78CAB8044]\nE       \t(No symbol) [0x00007FF78CAB81C9]\nE       \t(No symbol) [0x00007FF78CAA88C4]\nE       \tBaseThreadInitThunk [0x00007FFA543C7344+20]\nE       \tRtlUserThreadStart [0x00007FFA559426B1+33]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_bot_end_to_end.BotFlow testMethod=test_paymentsflow>\n\n    def test_paymentsflow(self):\n        self.open(\"https://www.dazn.com/en-GB/help\")\n        self.maximize_window()\n        self.click(self.acptterms_popuplocator_css, timeout=10)\n        self.accept_cookies_and_start_chat1_prod()\n        self.Non_signinuserJouney()\n        self.wait_for_element_visible(self.Dazn_button_x1, timeout=None)\n        self.click(self.Dazn_button_x1, timeout=None)\n>       self.AccessingDaznIcantLogin1()\n\ntests\\test_bot_end_to_end.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\prodchatbot_helpers.py:469: in AccessingDaznIcantLogin1\n    self.click(self.AccessDaznYesBtw_x, timeout=None)\nvenv\\lib\\site-packages\\seleniumbase\\fixtures\\base_case.py:500: in click\n    element = page_actions.wait_for_element_visible(\nvenv\\lib\\site-packages\\seleniumbase\\fixtures\\page_actions.py:508: in wait_for_element_visible\n    timeout_exception(NoSuchElementException, message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexception = <class 'selenium.common.exceptions.NoSuchElementException'>\nmessage = 'Element {button:contains(\"Yes\")} was not present after 7 seconds!'\n\n    def timeout_exception(exception, message):\n        exc, msg = shared_utils.format_exc(exception, message)\n>       raise exc(msg)\nE       seleniumbase.common.exceptions.NoSuchElementException: Message: \nE        Element {button:contains(\"Yes\")} was not present after 7 seconds!\n\nvenv\\lib\\site-packages\\seleniumbase\\fixtures\\page_actions.py:266: NoSuchElementException"}, "attachments": [{"name": "stdout", "source": "b94a8943-cba7-4f3f-a802-ad18bef6cfd6-attachment.txt", "type": "text/plain"}], "start": 1704997069807, "stop": 1704997133573, "uuid": "1d85e86d-afaa-4e0d-bf1b-2042ef50d419", "historyId": "00e05136ea02773aed854b64daa9c095", "testCaseId": "00e05136ea02773aed854b64daa9c095", "fullName": "tests.test_bot_end_to_end.BotFlow#test_paymentsflow", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_bot_end_to_end"}, {"name": "subSuite", "value": "BotFlow"}, {"name": "host", "value": "IN-PF42F61Z"}, {"name": "thread", "value": "30488-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_bot_end_to_end"}]}